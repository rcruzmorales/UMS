//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Web.Mvc;

namespace UMS.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;

    public partial class UserInfo
    {
        [Display(Name = "ID")]
        public int User_Id { get; set; }

        [Display(Name = "Username")]
        [StringLength(20, ErrorMessage = "Can't exceed more than 20 characters")]
        [MaxLength(20)]
        [Required(ErrorMessage = "Field is required")]
        [RegularExpression(@"[A-Za-z0-9]+", ErrorMessage = "Invalid username")]
        [AllowHtml]
        public string UserName { get; set; }

        [Display(Name = "First Name")]
        [StringLength(20, ErrorMessage = "Can't exceed more than 20 characters")]
        [MaxLength(20)]
        [Required(ErrorMessage = "Field is required")]
        [RegularExpression(@"[^\W\d\s]*", ErrorMessage = "Invalid First Name")]
        [AllowHtml]
        public string FirstName { get; set; }

        [Display(Name = "Last Name")]
        [StringLength(30, ErrorMessage = "Can't exceed more than 30 characters")]
        [MaxLength(30)]
        [Required(ErrorMessage = "Field is required")]
        [RegularExpression(@"^\b[A-Za-z]*\S.?[A-Za-z]*\b$", ErrorMessage = "Invalid Last Name")]
        [AllowHtml]
        public string LastName { get; set; }

        [RegularExpression(@"(\S+[0-9a-zA-Z]*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})", ErrorMessage = "Invalid Email")]
        [StringLength(50, ErrorMessage = "Can't exceed more than 50 characters")]
        [MaxLength(50)]
        [Required(ErrorMessage = "Field is required")]
        [AllowHtml]
        public string Email { get; set; }

        [StringLength(80, ErrorMessage = "Can't exceed more than 80 characters")]
        [MaxLength(80)]
        [Required(ErrorMessage = "Field is required")]
        [AllowHtml]
        public string Address { get; set; }

        [StringLength(50, ErrorMessage = "Can't exceed more than 50 characters")]
        [MaxLength(50)]
        [Required(ErrorMessage = "Field is required")]
        [RegularExpression(@"^\b[A-Za-z]*\S.?[A-Za-z]*\b$", ErrorMessage = "Invalid City")]
        [AllowHtml]
        public string City { get; set; }

        [Display(Name = "State")]
        [Required(ErrorMessage = "Field is required")]
        [StringLength(50, ErrorMessage = "Can't exceed more than 50 characters")]
        [MaxLength(50)]
        [RegularExpression(@"[A-Za-z]{2,3}", ErrorMessage = "Invalid State")]
        [AllowHtml]    
        public string Country { get; set; }

        [Required(ErrorMessage = "Field is required")]
        [Display(Name = "Zip Code")]
        [StringLength(9, ErrorMessage = "Can't exceed more than 9 characters")]
        [MaxLength(9)]
        [RegularExpression("(^\\d{5}(-\\d{4})?$)|(^[ABCEGHJKLMNPRSTVXY]{1}\\d{1}[A-Z]{1} *\\d{1}[A-Z]{1}\\d{1}$)", ErrorMessage = "Invalid Zip Code")]
        [DataType(DataType.PostalCode, ErrorMessage = "Invalid Zip Code")]
        [AllowHtml]
        
        public string Zipcode { get; set; }

        [Display(Name = "Phone Number")]
        [StringLength(14, ErrorMessage = "Can't exceed more than 13 characters")]
        [MaxLength(14)]
        [RegularExpression(@"^((1-)?\d{3}-)?\d{3}-\d{4}$", ErrorMessage = "Please follow the phone format: ###-###-####")]
        [AllowHtml]
        public string PhoneNumber { get; set; }

        public Nullable<int> Status_Id { get; set; }
        public Nullable<int> Role_Id { get; set; }
        public Nullable<int> Picture_Id { get; set; }

        public virtual ProfilePicture ProfilePicture { get; set; }
        public virtual Role Role { get; set; }
        public virtual Status Status { get; set; }
        public virtual UserCredential UserCredential { get; set; }
    }
}
